
import java.awt.Color;
import java.awt.Graphics;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;
import javax.swing.JOptionPane;

public class Frame extends javax.swing.JFrame {

    ArbolBinario arbol = new ArbolBinario();

    public Frame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        txDato = new javax.swing.JTextField();
        btninsert = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        btndelete = new javax.swing.JButton();
        btnmostrar = new javax.swing.JButton();
        btnbuscar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnContar = new javax.swing.JButton();
        btnnivel = new javax.swing.JButton();
        btnNodos = new javax.swing.JButton();
        btnHoja = new javax.swing.JButton();
        btnGrado = new javax.swing.JButton();
        btnHermanos = new javax.swing.JButton();
        btnPadre = new javax.swing.JButton();
        btnAltura = new javax.swing.JButton();
        btnHijos = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Arbol");
        setResizable(false);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("ARbol binario"));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 347, Short.MAX_VALUE)
        );

        txDato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txDatoActionPerformed(evt);
            }
        });

        btninsert.setText("Insertar Nodo");
        btninsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btninsertActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        btndelete.setText("Eliminar Arbol");
        btndelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndeleteActionPerformed(evt);
            }
        });

        btnmostrar.setText("Mostrar en Inorden");
        btnmostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnmostrarActionPerformed(evt);
            }
        });

        btnbuscar.setText("4.Buscar un dato");
        btnbuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbuscarActionPerformed(evt);
            }
        });

        jLabel1.setText("Resultado:");

        jLabel2.setText("Dato");

        btnContar.setText("1.Contar Raices");
        btnContar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnContarActionPerformed(evt);
            }
        });

        btnnivel.setText("2.Nivel de un dato");
        btnnivel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnnivelActionPerformed(evt);
            }
        });

        btnNodos.setText("3.Nodos de un nivel");
        btnNodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNodosActionPerformed(evt);
            }
        });

        btnHoja.setText("5.Hoja y Nivel");
        btnHoja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHojaActionPerformed(evt);
            }
        });

        btnGrado.setText("6.Grado ");
        btnGrado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGradoActionPerformed(evt);
            }
        });

        btnHermanos.setText("7.Hermanos de un dato");
        btnHermanos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHermanosActionPerformed(evt);
            }
        });

        btnPadre.setText("8.Padre de un dato");
        btnPadre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPadreActionPerformed(evt);
            }
        });

        btnAltura.setText("9.Altura arbol");
        btnAltura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlturaActionPerformed(evt);
            }
        });

        btnHijos.setText("10.Hijos dato");
        btnHijos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHijosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(btnNodos)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnPadre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(137, 137, 137))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(btnnivel, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                                            .addComponent(btnContar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnGrado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(btnHermanos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txDato))
                                            .addComponent(btninsert, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(btnHoja, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(btnbuscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(btndelete, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnmostrar, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addComponent(btnAltura, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnHijos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txDato, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(btndelete)
                            .addComponent(btnbuscar))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btninsert)
                            .addComponent(btnmostrar)
                            .addComponent(btnHoja))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnContar)
                            .addComponent(btnGrado)
                            .addComponent(btnAltura))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnnivel)
                            .addComponent(btnHermanos)
                            .addComponent(btnHijos))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnNodos)
                            .addComponent(btnPadre)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //Insertar en el arbol
    private void txDatoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txDatoActionPerformed
        try {
            int dato = Integer.parseInt(txDato.getText());
            txDato.setText("");
            arbol.insertar(dato);
            paint(jPanel2.getGraphics());
        } catch (Exception e) {
            JOptionPane.showConfirmDialog(this, "Error al Insertar el Dato");
        }
    }//GEN-LAST:event_txDatoActionPerformed

    private void btninsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btninsertActionPerformed
        try {
            int dato = Integer.parseInt(txDato.getText());
            txDato.setText("");
            arbol.insertar(dato);
            paint(jPanel2.getGraphics());
        } catch (Exception e) {
            JOptionPane.showConfirmDialog(this, "Error al Insertar el Dato");
        }
    }//GEN-LAST:event_btninsertActionPerformed
    //Pintar arbol
    private void btnmostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnmostrarActionPerformed
        LinkedList rec = new LinkedList();
        arbol.inorden(arbol.getRaiz(), rec);
        String cad = "Recorrido Inorden:\n";
        for (Object rec1 : rec) {
            cad += rec1 + "  ";
        }
        jTextArea1.setText(cad);
    }//GEN-LAST:event_btnmostrarActionPerformed
    //Buscar dato Metodo 4
    private void btnbuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbuscarActionPerformed
        try {
            int dato = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingresa Dato a buscar"));
            JOptionPane.showMessageDialog(this, arbol.existe(dato) ? "El dato fue encontrado" : "El dato no existe");
        } catch (Exception e) {
            JOptionPane.showConfirmDialog(this, "Error al buscar el dato");
        }

    }//GEN-LAST:event_btnbuscarActionPerformed
    //Eliminar Arbol
    private void btndeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndeleteActionPerformed
        arbol = null;
        arbol = new ArbolBinario();
        paint(jPanel2.getGraphics());
    }//GEN-LAST:event_btndeleteActionPerformed

    private void btnContarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnContarActionPerformed
        
        String salida = "Las Raices del arbol son\n" + contarPadres(arbol.getRaiz());
        jTextArea1.setText (salida);
    }//GEN-LAST:event_btnContarActionPerformed

    public static int contarPadres(Nodo arbol) {
        if (arbol == null) {
            return 0;
        }  else {
            int count = 0;
            if (arbol.getIzq() != null || arbol.getDer() != null) {
                count++;
            }
            count += contarPadres(arbol.getIzq());
            count += contarPadres(arbol.getDer());
            return count;
        }
    }

    private void btnnivelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnnivelActionPerformed
        int dato = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingresa un Dato"));
        int nivel = arbol.buscarNivel(arbol.getRaiz(), dato, 1);
        if (nivel == -1) {
            JOptionPane.showMessageDialog(this, "El dato no fue encontrado");
        } else {
            String salida = "El nivel del dato es:\n" + nivel;
            jTextArea1.setText(salida);
        }
    }//GEN-LAST:event_btnnivelActionPerformed

    private void btnNodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNodosActionPerformed
        int nivel = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingresa un nivel"));
        String salida = "Datos del Nivel " + nivel + "\n";
        if (arbol.getRaiz() == null) {
            return;
        }

        Queue<Nodo> queue = new LinkedList<>();
        queue.offer(arbol.getRaiz());

        int nivelActual = 1;

        while (!queue.isEmpty()) {
            int nodosEnNivel = queue.size();

            for (int i = 0; i < nodosEnNivel; i++) {
                Nodo nodoActual = queue.poll();

                if (nivelActual == nivel) {
                    salida += nodoActual.getDato() + " , ";
                }

                if (nodoActual.getIzq() != null) {
                    queue.offer(nodoActual.getIzq());
                }

                if (nodoActual.getDer() != null) {
                    queue.offer(nodoActual.getDer());
                }
            }

            nivelActual++;
        }
        jTextArea1.setText(salida);
    }//GEN-LAST:event_btnNodosActionPerformed

    private void btnHojaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHojaActionPerformed
        String salida = "Hojas del árbol y su nivel\n";
        if (arbol.getRaiz() == null) {
            JOptionPane.showMessageDialog(null, "El arbol esta vacio");
        }

        Stack<Nodo> pilaNodos = new Stack<>();
        Stack<Integer> pilaNiveles = new Stack<>();

        pilaNodos.push(arbol.getRaiz());
        pilaNiveles.push(1);

        while (!pilaNodos.isEmpty()) {
            Nodo nodoActual = pilaNodos.pop();
            int nivelActual = pilaNiveles.pop();

            if (nodoActual.getIzq() == null && nodoActual.getDer() == null) {
                salida += "Hoja: " + nodoActual.getDato() + ", Nivel: " + nivelActual + "\n";
            }

            if (nodoActual.getDer() != null) {
                pilaNodos.push(nodoActual.getDer());
                pilaNiveles.push(nivelActual + 1);
            }

            if (nodoActual.getIzq() != null) {
                pilaNodos.push(nodoActual.getIzq());
                pilaNiveles.push(nivelActual + 1);
            }
        }
        jTextArea1.setText(salida);
    }//GEN-LAST:event_btnHojaActionPerformed

    private void btnGradoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGradoActionPerformed
        String salida = "Grado de cada nodo\n";
        if (arbol.getRaiz() == null) {
            JOptionPane.showMessageDialog(null, "El árbol está vacío.");
        }

        Queue<Nodo> cola = new LinkedList<>();
        cola.offer(arbol.getRaiz());

        while (!cola.isEmpty()) {
            Nodo nodoActual = cola.poll();
            int grado = obtenerGradoNodo(nodoActual);

            salida += ("Nodo: " + nodoActual.getDato() + ", Grado: " + grado) + "\n";

            if (nodoActual.getIzq() != null) {
                cola.offer(nodoActual.getIzq());
            }

            if (nodoActual.getDer() != null) {
                cola.offer(nodoActual.getDer());
            }
        }
        jTextArea1.setText(salida);
    }//GEN-LAST:event_btnGradoActionPerformed

    int obtenerGradoNodo(Nodo nodo) {
        int grado = 0;

        if (nodo.getIzq() != null) {
            grado++;
        }

        if (nodo.getDer() != null) {
            grado++;
        }

        return grado;
    }
    private void btnHermanosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHermanosActionPerformed
        int dato = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingresa un dato"));
        String salida = "Hermano del nodo " + dato + "\n";
        if (arbol.getRaiz() == null) {
            JOptionPane.showMessageDialog(null, "El árbol está vacío.");
        }

        Nodo nodoDato = buscarNodo(arbol.getRaiz(), dato);

        if (nodoDato == null) {
            JOptionPane.showMessageDialog(null, "No se encontró el dato " + dato + " en el árbol.");
        }

        Nodo nodoPadre = encontrarPadre(arbol.getRaiz(), dato);

        if (nodoPadre == null) {
            salida += ("El dato " + dato + " es la raíz del árbol y no tiene hermanos.");
            return;
        }

        Nodo nodoHermano = obtenerHermano(nodoPadre, nodoDato);

        if (nodoHermano == null) {
            salida += ("El dato " + dato + " no tiene hermanos en el árbol.");
        } else {
            salida += (nodoHermano.getDato() + "\n");
        }

        jTextArea1.setText(salida);
    }//GEN-LAST:event_btnHermanosActionPerformed

    Nodo encontrarPadre(Nodo raiz, int dato) {
        if (raiz == null) {
            return null;
        }

        if ((raiz.getIzq() != null && raiz.getIzq().getDato() == dato)
                || (raiz.getDer() != null && raiz.getDer().getDato() == dato)) {
            return raiz;
        }

        Nodo nodoPadre = encontrarPadre(raiz.getIzq(), dato);

        if (nodoPadre == null) {
            nodoPadre = encontrarPadre(raiz.getDer(), dato);
        }

        return nodoPadre;
    }

    Nodo buscarNodo(Nodo raiz, int dato) {
        if (raiz == null) {
            JOptionPane.showMessageDialog(null, "El Nodo no tiene Hermano");
        } else if (raiz.getDato() == dato) {
            return raiz;
        }

        Nodo nodoEncontrado = buscarNodo(raiz.getIzq(), dato);

        if (nodoEncontrado == null) {
            nodoEncontrado = buscarNodo(raiz.getDer(), dato);
        }

        return nodoEncontrado;
    }

    Nodo obtenerHermano(Nodo nodoPadre, Nodo nodoActual) {
        if (nodoPadre == null || nodoActual == null) {
            return null;
        }

        if (nodoPadre.getIzq() == nodoActual) {
            return nodoPadre.getDer();
        }

        if (nodoPadre.getDer() == nodoActual) {
            return nodoPadre.getIzq();
        }

        return null;
    }
    private void btnPadreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPadreActionPerformed
        int dato = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingresa un dato"));
        String salida = "Padre del nodo " + dato + "\n";

        jTextArea1.setText(salida + encontrarPadre(arbol.getRaiz(), dato).getDato());
    }//GEN-LAST:event_btnPadreActionPerformed

    private void btnAlturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlturaActionPerformed
        jTextArea1.setText("Altura del Arbol\n" + arbol.getAltura());
    }//GEN-LAST:event_btnAlturaActionPerformed

    private void btnHijosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHijosActionPerformed
        //Mostrar hijos de un dato dado
        int dato = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingresa un dato"));
        String salida = "Padre del nodo " + dato + "\n";
        Nodo p = arbol.getRaiz(), ant;
        boolean sw = false;
        if (p == null) {
            JOptionPane.showMessageDialog(null, "El árbol está vacío");
        } else {
            while (p != null && sw == false) {
                ant = p;
                if (dato == p.getDato()) {
                    sw = true;
                } else if (dato < p.getDato()) {
                    p = p.getIzq();
                } else {
                    p = p.getDer();
                }
            }
            if (sw) {//el dato se encontró
                if (p.getIzq() == null && p.getDer() == null) {
                    salida += ("El dato no tiene hijos");
                } else if (p.getDer() != null && p.getIzq() == null) {
                    salida += ("El dato solo tiene un hijo a la derecha: "
                            + p.getDer().getDato());
                } else if (p.getDer() == null && p.getIzq() != null) {
                    salida += ("El dato solo tiene un hijo a la izquierda: "
                            + p.getDer().getDato());
                } else {//tiene los dos hijos
                    salida += ("Los hijos del dato son: "
                            + "hijo izquierdo: " + p.getIzq().getDato()
                            + ", hijo derecho: " + p.getDer().getDato());
                }
            } else {
                JOptionPane.showMessageDialog(null, "No se encontró el dato");
            }
        }
        jTextArea1.setText(salida);
    }//GEN-LAST:event_btnHijosActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

}
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frame.class  

.getName()).log(java.util.logging.Level.SEVERE, null, ex);

} catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frame.class  

.getName()).log(java.util.logging.Level.SEVERE, null, ex);

} catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frame.class  

.getName()).log(java.util.logging.Level.SEVERE, null, ex);

} catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frame.class  

.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAltura;
    private javax.swing.JButton btnContar;
    private javax.swing.JButton btnGrado;
    private javax.swing.JButton btnHermanos;
    private javax.swing.JButton btnHijos;
    private javax.swing.JButton btnHoja;
    private javax.swing.JButton btnNodos;
    private javax.swing.JButton btnPadre;
    private javax.swing.JButton btnbuscar;
    private javax.swing.JButton btndelete;
    private javax.swing.JButton btninsert;
    private javax.swing.JButton btnmostrar;
    private javax.swing.JButton btnnivel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField txDato;
    // End of variables declaration//GEN-END:variables

    private void pintaArbol(Graphics g, Nodo n, int x, int y, int xoff, int yoff, int nivel) {
        if (n == null) {
            return;
        }
        g.setColor(Color.GRAY);
        if (n.getIzq() != null) {
            g.drawLine(x, y, x - xoff + (nivel * 2), y + yoff);
        }
        if (n.getDer() != null) {
            g.drawLine(x, y, x + xoff - (nivel * 2), y + yoff);
        }

        g.fillOval(x - 10, y - 20, 30, 30);

        g.setColor(Color.black);
        g.drawString(n.getDato() + "", x, y);

        pintaArbol(g, n.getIzq(), (int) (x - xoff), (y + yoff), xoff + nivel * 2, yoff, nivel + 1);
        pintaArbol(g, n.getDer(), (int) (x + xoff), (y + yoff), xoff - nivel * 2, yoff, nivel + 1);
    }

    @Override
public void paint(Graphics g) {
        jPanel2.revalidate();
        super.paint(g);
        int X = (getWidth() / 5) * arbol.getAltura();
        int X2 = (getWidth() / 12);
        int Y = getHeight() / 12;
        pintaArbol(jPanel2.getGraphics(), arbol.getRaiz(), jPanel2.getWidth() / 2, Y, X2, Y, 1);

    }
}
